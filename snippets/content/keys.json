{
    "FontFace Attribute": {
        "prefix": "FontFace",
        "body": "FontFace",
        "description": "Fonts are used in String meters with the FontFace option."
    },
    "FontColor Attribute": {
        "prefix": "FontColor",
        "body": "FontColor",
        "description": "Sets the font color for a String meter."
    },
    "FontSize Attribute": {
        "prefix": "FontSize",
        "body": "FontSize",
        "description": "Sets the font size for a String meter."
    },
    "StringAlign Attribute": {
        "prefix": "StringAlign",
        "body": "StringAlign",
        "description": "Aligns the text within a String meter."
    },
    "Antialias Attribute": {
        "prefix": "Antialias",
        "body": "Antialias",
        "description": "Enables or disables antialiasing for a String meter."
    },
    "SolidColor Attribute": {
        "prefix": "SolidColor",
        "body": "SolidColor",
        "description": "Sets the solid color for a meter."
    },
    "X Attribute": {
        "prefix": "X",
        "body": "X",
        "description": "Sets the X position of the meter."
    },
    "Y Attribute": {
        "prefix": "Y",
        "body": "Y",
        "description": "Sets the Y position of the meter."
    },
    "W Attribute": {
        "prefix": "W",
        "body": "W",
        "description": "Sets the width of the meter."
    },
    "H Attribute": {
        "prefix": "H",
        "body": "H",
        "description": "Sets the height of the meter."
    },
    "Text Attribute": {
        "prefix": "Text",
        "body": "Text",
        "description": "Sets the text for a String meter."
    },
    "Meter Attribute": {
        "prefix": "Meter",
        "body": "Meter",
        "description": "Defines the type of meter."
    },
    "Measure Attribute": {
        "prefix": "Measure",
        "body": "Measure",
        "description": "Defines the measure that the meter will use."
    },
    "Plugin Attribute": {
        "prefix": "Plugin",
        "body": "Plugin",
        "description": "Defines the Plugin that the meter will use."
    },
    "MouseActionCursor Attribute": {
        "prefix": "MouseActionCursor",
        "body": "MouseActionCursor",
        "description": "Sets the cursor style when a mouse action is triggered."
    },
    "MouseActionCursorName Attribute": {
        "prefix": "MouseActionCursorName",
        "body": "MouseActionCursorName",
        "description": "Sets the name of the cursor for mouse actions."
    },
    "ScriptFile Attribute": {
        "prefix": "ScriptFile",
        "body": "ScriptFile",
        "description": "Specifies the script file to be executed."
    },
    "MeterStyle Attribute": {
        "prefix": "MeterStyle",
        "body": "MeterStyle",
        "description": "Defines the style for a meter."
    },
    "Hidden Attribute": {
        "prefix": "Hidden",
        "body": "Hidden",
        "description": "Hides or shows a meter."
    },
    "DynamicVariables Attribute": {
        "prefix": "DynamicVariables",
        "body": "DynamicVariables",
        "description": "Enables or disables dynamic variables."
    },
    "FontWeight Attribute": {
        "prefix": "FontWeight",
        "body": "FontWeight",
        "description": "Sets the weight of the font."
    },
    "StrokeWidth Attribute": {
        "prefix": "StrokeWidth",
        "body": "StrokeWidth",
        "description": "Sets the stroke width for a meter."
    },
    "FillColor Attribute": {
        "prefix": "FillColor",
        "body": "FillColor",
        "description": "Sets the fill color for a meter."
    },
    "Offset Attribute": {
        "prefix": "Offset",
        "body": "Offset",
        "description": "Sets the offset for a meter."
    },
    "DragGroup Attribute": {
        "prefix": "DragGroup",
        "body": "DragGroup",
        "description": "Specifies the group for dragging a meter."
    },
    "Group Attribute": {
        "prefix": "Group",
        "body": "Group",
        "description": "Defines the group for a meter."
    },
    "AutoSelectScreen Attribute": {
        "prefix": "AutoSelectScreen",
        "body": "AutoSelectScreen",
        "description": "Automatically selects the screen for a skin."
    },
    "LoadOrder Attribute": {
        "prefix": "LoadOrder",
        "body": "LoadOrder",
        "description": "Sets the load order for a skin or meter."
    },
    "KeepOnScreen Attribute": {
        "prefix": "KeepOnScreen",
        "body": "KeepOnScreen",
        "description": "Keeps the skin on the screen."
    },
    "ClickThrough Attribute": {
        "prefix": "ClickThrough",
        "body": "ClickThrough",
        "description": "Enables or disables click-through for a skin."
    },
    "FadeDuration Attribute": {
        "prefix": "FadeDuration",
        "body": "FadeDuration",
        "description": "Sets the fade duration for a meter or skin."
    },
    "OnHover Attribute": {
        "prefix": "OnHover",
        "body": "OnHover",
        "description": "Defines the action to take on hover for a meter."
    },
    "AlphaValue Attribute": {
        "prefix": "AlphaValue",
        "body": "AlphaValue",
        "description": "Sets the transparency of the skin. Valid values range from 0 (fully transparent) to 255 (fully visible)."
    },
    "StartHidden Attribute": {
        "prefix": "StartHidden",
        "body": "StartHidden",
        "description": "If set to 1, the skin will start hidden. The !Show bang must be used to show the skin."
    },
    "SnapEdges Attribute": {
        "prefix": "SnapEdges",
        "body": "SnapEdges",
        "description": "If set to 1, the skin will snap onto screen edges and other skins when moved. To disable snapping temporarily, hold the CTRL key down while moving the skin."
    },
    "DraggableDefault Attribute": {
        "prefix": "DraggableDefault",
        "body": "DraggableDefault",
        "description": "Sets the default draggable behavior for a skin."
    },
    "AlwaysOnTop Attribute": {
        "prefix": "AlwaysOnTop",
        "body": "AlwaysOnTop",
        "description": "Keeps the skin on top of other windows."
    },
    "SavePosition Attribute": {
        "prefix": "SavePosition",
        "body": "SavePosition",
        "description": "Saves the position of the skin when it is moved."
    },
    "AnchorX Attribute": {
        "prefix": "AnchorX",
        "body": "AnchorX",
        "description": "Sets the X anchor position of the skin or meter."
    },
    "AnchorY Attribute": {
        "prefix": "AnchorY",
        "body": "AnchorY",
        "description": "Sets the Y anchor position of the skin or meter."
    },
    "WindowX Attribute": {
        "prefix": "WindowX",
        "body": "WindowX",
        "description": "Sets the X position of the skin window."
    },
    "WindowY Attribute": {
        "prefix": "WindowY",
        "body": "WindowY",
        "description": "Sets the Y position of the skin window."
    },
    "Active Attribute": {
        "prefix": "Active",
        "body": "Active",
        "description": "Sets whether the skin or meter is active."
    },
    "ImageTint Attribute": {
        "prefix": "ImageTint",
        "body": "ImageTint",
        "description": "Applies a tint to an image in a skin."
    },
    "UpdateDivider Attribute": {
        "prefix": "UpdateDivider",
        "body": "UpdateDivider",
        "description": "Sets the update interval for the skin or meter."
    },
    "Disabled Attribute": {
        "prefix": "Disabled",
        "body": "Disabled",
        "description": "Disables a meter or skin functionality."
    },
    "ImagePath Attribute": {
        "prefix": "ImagePath",
        "body": "ImagePath",
        "description": "Sets the path for an image used in a skin."
    },
    "ImageAlpha Attribute": {
        "prefix": "ImageAlpha",
        "body": "ImageAlpha",
        "description": "Sets the alpha transparency for an image."
    },
    "ImageFlip Attribute": {
        "prefix": "ImageFlip",
        "body": "ImageFlip",
        "description": "Flips the image. Valid values are None, Horizontal, Vertical or Both."
    },
    "StringStyle Attribute": {
        "prefix": "StringStyle",
        "body": "StringStyle",
        "description": "Style of the string. Valid values are Normal, Bold, Italic, and BoldItalic."
    },
    "ToolTipText Attribute": {
        "prefix": "ToolTipText",
        "body": "ToolTipText",
        "description": "Sets the text for a tool tip."
    },
    "ToolTipTitle Attribute": {
        "prefix": "ToolTipTitle",
        "body": "ToolTipTitle",
        "description": "Sets the title of a tool tip."
    },
    "ToolTipIcon Attribute": {
        "prefix": "ToolTipIcon",
        "body": "ToolTipIcon",
        "description": "Sets the icon for a tool tip."
    },
    "ToolTipType Attribute": {
        "prefix": "ToolTipType",
        "body": "ToolTipType",
        "description": "Defines the type of tool tip."
    },
    "ToolTipWidth Attribute": {
        "prefix": "ToolTipWidth",
        "body": "ToolTipWidth",
        "description": "Sets the width of a tool tip."
    },
    "RegHKey Attribute": {
        "prefix": "RegHKey",
        "body": "RegHKey",
        "description": "Defines the registry root key for a registry action."
    },
    "RegKey Attribute": {
        "prefix": "RegKey",
        "body": "RegKey",
        "description": "Defines the registry key for a registry action."
    },
    "RegValue Attribute": {
        "prefix": "RegValue",
        "body": "RegValue",
        "description": "Defines the registry value for a registry action."
    },
    "PreserveAspectRatio Attribute": {
        "prefix": "PreserveAspectRatio",
        "body": "PreserveAspectRatio",
        "description": "Preserves the aspect ratio of an image."
    },
    "InlineSetting Attribute": {
        "prefix": "InlineSetting",
        "body": "InlineSetting",
        "description": "Defines an inline setting for a skin."
    },
    "InlinePattern Attribute": {
        "prefix": "InlinePattern",
        "body": "InlinePattern",
        "description": "Defines an InlinePattern for a skin."
    },
    "Container Attribute": {
        "prefix": "Container",
        "body": "Container",
        "description": "Defines a container for meters and controls."
    },
    "MeasureName Attribute": {
        "prefix": "MeasureName",
        "body": "MeasureName",
        "description": "Sets the name for a measure."
    },
    "BarColor Attribute": {
        "prefix": "BarColor",
        "body": "BarColor",
        "description": "Sets the color for a bar meter."
    },
    "BarImage Attribute": {
        "prefix": "BarImage",
        "body": "BarImage",
        "description": "Sets the image for a bar meter."
    },
    "BarBorder Attribute": {
        "prefix": "BarBorder",
        "body": "BarBorder",
        "description": "Defines the border for a bar meter."
    },
    "BarOrientation Attribute": {
        "prefix": "BarOrientation",
        "body": "BarOrientation",
        "description": "Defines the orientation of a bar meter."
    },
    "BitmapSeparation Attribute": {
        "prefix": "BitmapSeparation",
        "body": "BitmapSeparation",
        "description": "Sets the separation between bitmap images."
    },
    "BitmapAlign Attribute": {
        "prefix": "BitmapAlign",
        "body": "BitmapAlign",
        "description": "Aligns the bitmap images within a meter."
    },
    "BitmapDigits Attribute": {
        "prefix": "BitmapDigits",
        "body": "BitmapDigits",
        "description": "Defines the number of digits in a bitmap meter."
    },
    "BitmapExtend Attribute": {
        "prefix": "BitmapExtend",
        "body": "BitmapExtend",
        "description": "Defines the extension for bitmap images in a meter."
    },
    "BitmapZeroFrame Attribute": {
        "prefix": "BitmapZeroFrame",
        "body": "BitmapZeroFrame",
        "description": "Sets the zero frame index for a bitmap meter."
    },
    "BitmapTransitionFrames Attribute": {
        "prefix": "BitmapTransitionFrames",
        "body": "BitmapTransitionFrames",
        "description": "Defines the number of transition frames for a bitmap meter."
    },
    "BitmapFrames Attribute": {
        "prefix": "BitmapFrames",
        "body": "BitmapFrames",
        "description": "Sets the number of frames for a bitmap meter."
    },
    "BitmapImage Attribute": {
        "prefix": "BitmapImage",
        "body": "BitmapImage",
        "description": "Sets the image for a bitmap meter."
    },
    "ButtonImage Attribute": {
        "prefix": "ButtonImage",
        "body": "ButtonImage",
        "description": "Defines the image for a button meter."
    },
    "ButtonCommand Attribute": {
        "prefix": "ButtonCommand",
        "body": "ButtonCommand",
        "description": "Sets the command to run when the button is clicked."
    },
    "PrimaryColorMatrixN Attribute": {
        "prefix": "PrimaryColorMatrixN",
        "body": "PrimaryColorMatrixN",
        "description": "Applies the color matrix transformation to the primary image."
    },
    "SecondaryColorMatrixN Attribute": {
        "prefix": "SecondaryColorMatrixN",
        "body": "SecondaryColorMatrixN",
        "description": "Applies the color matrix transformation to the secondary image."
    },
    "BothImageColorMatrixN Attribute": {
        "prefix": "BothImageColorMatrixN",
        "body": "BothImageColorMatrixN",
        "description": "Applies the color matrix transformation to both primary and secondary images."
    },
    "PrimaryImageRotate Attribute": {
        "prefix": "PrimaryImageRotate",
        "body": "PrimaryImageRotate",
        "description": "Rotates the primary image by the specified angle."
    },
    "SecondaryImageRotate Attribute": {
        "prefix": "SecondaryImageRotate",
        "body": "SecondaryImageRotate",
        "description": "Rotates the secondary image by the specified angle."
    },
    "BothImageRotate Attribute": {
        "prefix": "BothImageRotate",
        "body": "BothImageRotate",
        "description": "Rotates both primary and secondary images by the specified angle."
    },
    "PrimaryImageAlpha Attribute": {
        "prefix": "PrimaryImageAlpha",
        "body": "PrimaryImageAlpha",
        "description": "Sets the alpha transparency for the primary image."
    },
    "SecondaryImageAlpha Attribute": {
        "prefix": "SecondaryImageAlpha",
        "body": "SecondaryImageAlpha",
        "description": "Sets the alpha transparency for the secondary image."
    },
    "BothImageAlpha Attribute": {
        "prefix": "BothImageAlpha",
        "body": "BothImageAlpha",
        "description": "Sets the alpha transparency for both primary and secondary images."
    },
    "ScaleMargins Attribute": {
        "prefix": "ScaleMargins",
        "body": "ScaleMargins=Left, Top, Right, Bottom",
        "description": "Margins of the image to exclude from scaling when Tile=0 and PreserveAspectRatio=0.Example: ScaleMargins=10, 50, 10, 50"
    },
    "Tile Attribute": {
        "prefix": "Tile",
        "body": "Tile",
        "description": "If set to 1, the image is tiled (repeated) within the bounds defined by W and H"
    },
    "MaskImageName Attribute": {
        "prefix": "MaskImageName",
        "body": "MaskImageName",
        "description": "Defines the name of the mask image."
    },
    "MaskImagePath Attribute": {
        "prefix": "MaskImagePath",
        "body": "MaskImagePath",
        "description": "Sets the path for the mask image."
    },
    "MaskImageFlip Attribute": {
        "prefix": "MaskImageFlip",
        "body": "MaskImageFlip",
        "description": "Flips the mask image horizontally or vertically."
    },
    "MaskImageRotate Attribute": {
        "prefix": "MaskImageRotate",
        "body": "MaskImageRotate",
        "description": "Rotates the mask image by the specified angle."
    },
    "TransformStroke Attribute": {
        "prefix": "TransformStroke",
        "body": "TransformStroke",
        "description": "Determines how the line (stroke) width is treated when TransformationMatrix is used on the meter.Normal (default) : The line width will be impacted by any scale or skew transforms from TransformationMatrix.Fixed : The line width will not be impacted by any transforms from TransformationMatrix. The width will be fixed to the width defined in LineWidth"
    },
    "HorizontalLineColor Attribute": {
        "prefix": "HorizontalLineColor",
        "body": "HorizontalLineColor",
        "description": "Color of the horizontal marker lines (for HorizontalLines=1)."
    },
    "HorizontalLines Attribute": {
        "prefix": "HorizontalLines",
        "body": "HorizontalLines",
        "description": "If set to 1, horizontal marker lines are displayed behind the lines."
    },
    "LineCount Attribute": {
        "prefix": "LineCount",
        "body": "LineCount",
        "description": "Number of lines in the meter.Default: 1"
    },
    "Scale Attribute": {
        "prefix": "Scale",
        "body": "Scale",
        "description": "Scaling factor used for the measure values. The measure value is divided by the specified value. If the specified value has a decimal point (e.g. 1000.0), the result will also display decimals.Note: If AutoScale is enabled, this option is ignored."
    },
    "LineWidth Attribute": {
        "prefix": "LineWidth",
        "body": "LineWidth",
        "description": "Width in pixels of the line when Solid is 0."
    },
    "OffsetX Attribute": {
        "prefix": "OffsetX",
        "body": "OffsetX",
        "description": "Sets the horizontal offset for an element."
    },
    "OffsetY Attribute": {
        "prefix": "OffsetY",
        "body": "OffsetY",
        "description": "Sets the vertical offset for an element."
    },
    "StartAngle Attribute": {
        "prefix": "StartAngle",
        "body": "StartAngle",
        "description": "The starting angle in radians for the line. This defines the starting point on the circle that will be treated as zero percent. The zero angle is to the right of the center."
    },
    "RotationAngle Attribute": {
        "prefix": "RotationAngle",
        "body": "RotationAngle",
        "description": "The size of the rotation angle in radians for the line. This defines the distance in radians from StartAngle that the meter will travel around the circle when the measure value is 100%. Use a negative value for counter-clockwise rotation."
    },
    "ValueRemainder Attribute": {
        "prefix": "ValueRemainder",
        "body": "ValueRemainder",
        "description": "Use a remainder instead of the actual measured value.This is primarily used to draw an analog clock. When used with the value of a Time measure in MeasureName the meter will internally use the % modulo mathematical operator, and calculate the meter based on the remainder when the number of seconds in the Time measure is divided by the following values:Hours Hand: ValueRemainder=43200 Seconds in a 12-hour analog clock face.Minutes Hand: ValueRemainder=3600 Seconds in an hour.Seconds Hand: ValueRemainder=60 Seconds in a minute.."
    },
    "ControlLength Attribute": {
        "prefix": "ControlLength",
        "body": "ControlLength",
        "description": "If ControlLength is set to 1, then the percentage value of the measure that is bound to the meter controls the length of the line. This is defined by LengthShift, and will range from LineLength to (LineLength + LengthShift) pixels from the center of rotation."
    },
    "LengthShift Attribute": {
        "prefix": "LengthShift",
        "body": "LengthShift",
        "description": "If ControlLength is set to 1, then the percentage value of the measure that is bound to the meter controls the length of the line. This is defined by LengthShift, and will range from LineLength to (LineLength + LengthShift) pixels from the center of rotation."
    },
    "ControlStart Attribute": {
        "prefix": "ControlStart",
        "body": "ControlStart",
        "description": "Defines the start position of a control element."
    },
    "StartShift Attribute": {
        "prefix": "StartShift",
        "body": "StartShift",
        "description": "Defines the starting shift value for a control element."
    },
    "ControlAngle Attribute": {
        "prefix": "ControlAngle",
        "body": "ControlAngle",
        "description": "If ControlAngle is 1 (default), then the percentage value of the measure that is bound to the meter controls the angle of the line (or the fill rotation if Solid=1) starting at StartAngle for RotationAngle radians.If ControlAngle is set to 0, then the measure does not control the angle of the line, which will be static at the value in StartAngle. RotationAngle is ignored."
    },
    "Solid Attribute": {
        "prefix": "Solid",
        "body": "Solid",
        "description": "If set to 1, meter will fill the meter with LineColor from StartAngle to the current MeasureName percentage value. LineWidth is ignored."
    },
    "LineColor Attribute": {
        "prefix": "LineColor",
        "body": "LineColor",
        "description": "Sets the color of a line in a graph or meter."
    },
    "LineLength Attribute": {
        "prefix": "LineLength",
        "body": "LineLength",
        "description": "Length in pixels of the line. The length is always measured from the center of rotation, regardless of the LineStart option."
    },
    "LineStart Attribute": {
        "prefix": "LineStart",
        "body": "LineStart",
        "description": "Defines the distance in pixels from the center of rotation at which the line starts."
    },
    "StringCase Attribute": {
        "prefix": "StringCase",
        "body": "StringCase",
        "description": "Converts the string to a case. Valid values are None, Upper, Lower, and Proper."
    },
    "StringEffect Attribute": {
        "prefix": "StringEffect",
        "body": "StringEffect",
        "description": "Effect applied to a string. Valid values are None, Shadow, and Border.Shadow makes a background copy of the string, offset 1px \"right\" and 1px \"down\", in the color defined in FontEffectColor.Border makes a background copy of the string, 2px \"larger\", and offset 1px\"left\" and 1px \"up\", in the color defined in FontEffectColor.The size of the font used in the string has no effect on the fixed 1px size of the Shadow or Border effect."
    },
    "FontEffectColor Attribute": {
        "prefix": "FontEffectColor",
        "body": "FontEffectColor",
        "description": "Sets the font color for string effects."
    },
    "ClipString Attribute": {
        "prefix": "ClipString",
        "body": "ClipString",
        "description": "Controls how strings are truncated (clipped) or wrapped to fit in or expand the containing meter. Valid values are:0: Disabled. The string will not be clipped or wrapped. (default)1: Enabled. The string will be clipped with an added ellipsis ... when it exceeds the specified W (width) option on the meter. If the H (height) option is large enough to allow multiple lines, the text is wrapped until the value of H is reached, then clipped.2: Auto. The string will be clipped or wrapped based on the value of W and/or H. If the width or height are not specified, the meter itself will change size to accommodate the string. This setting works in conjunction with the ClipStringW and ClipStringH options below, to set a \"maximum\" size that the meter should expand to accommodate the string before clipping."
    },
    "ClipStringW Attribute": {
        "prefix": "ClipStringW",
        "body": "ClipStringW",
        "description": "Sets a maximum width that the meter will expand to accommodate the string when ClipString=2. This setting is ignored if the W option is set."
    },
    "ClipStringH Attribute": {
        "prefix": "ClipStringH",
        "body": "ClipStringH",
        "description": "Sets a maximum height that the meter will expand to accommodate the string when ClipString=2. This setting is ignored if the H option is set."
    },
    "TrailingSpaces Attribute": {
        "prefix": "TrailingSpaces",
        "body": "TrailingSpaces",
        "description": "When this option is set to 1, any Text option that is enclosed in \"quotes\" will display leading and trailing spaces on the string.Example: Text=\"        This has leading and trailing spaces     "
    },
    "Angle Attribute": {
        "prefix": "Angle",
        "body": "Angle",
        "description": "Defines the angle of the text in radians.Note: The size and position of the text are always calculated as if the text is horizontal. This also means that the click-able field used for Mouse Actions does not change. It remains where the text would be with no Angle."
    },
    "Percentual Attribute": {
        "prefix": "Percentual",
        "body": "Percentual",
        "description": "If set to 1, the value of bound measures are converted to a percentage. This is useful if a measure does not return a percentage value, but either automatically defines a valid \"range\" of values (e.g. FreeDiskSpace) or when the MinValue and/or MaxValue options are manually set on the measure."
    },
    "NumOfDecimals Attribute": {
        "prefix": "NumOfDecimals",
        "body": "NumOfDecimals",
        "description": "Number of decimals to display with numerical measure values."
    },
    "Left Attribute": {
        "prefix": "Left",
        "body": "Left",
        "description": "Aligns the element to the left."
    },
    "Right Attribute": {
        "prefix": "Right",
        "body": "Right",
        "description": "Aligns the element to the right."
    },
    "GreyScale Attribute": {
        "prefix": "GreyScale",
        "body": "GreyScale",
        "description": "If set to 1, the image is greyscaled. (color desaturated)"
    },
    "ImageCrop Attribute": {
        "prefix": "ImageCrop",
        "body": "ImageCrop",
        "description": "Crops out and uses a defined part of the image. The option value should be in the form: X, Y, W, H, Origin.A way to envision what ImageCrop is doing is:ImageCrop=-50,-30,100,60,5"
    },
    "ImageRotate Attribute": {
        "prefix": "ImageRotate",
        "body": "ImageRotate",
        "description": "Rotates the image by the specified angle in degrees. Negative angles can be used for counter-clockwise rotation.ImageRotate is done before any resizing of the image with the W and H general meter options. If W and H are set, the new \"rotated\" image will be resized to fit.If W and H are not defined, ImageRotate will change the size of the entire meter container to the size of the \"rotated\" image."
    },
    "AutoScale Attribute": {
        "prefix": "AutoScale",
        "body": "AutoScale",
        "description": "If set to 1, the histogram is automatically scaled to show all the values."
    },
    "GraphStart Attribute": {
        "prefix": "GraphStart",
        "body": "GraphStart",
        "description": "Starting point of the graph. Valid values are Left and Right."
    },
    "GraphOrientation Attribute": {
        "prefix": "GraphOrientation",
        "body": "GraphOrientation",
        "description": "Orientation of the graph elements. Valid values are Horizontal and Vertical."
    },
    "Flip Attribute": {
        "prefix": "Flip",
        "body": "Flip",
        "description": "Flips the bar in a bar meter."
    },
    "PrimaryColor Attribute": {
        "prefix": "PrimaryColor",
        "body": "PrimaryColor",
        "description": "Sets the Colors for the histogram.PrimaryColor is the color for the primary histogram. Default is dark green 0,128,0."
    },
    "SecondaryColor Attribute": {
        "prefix": "SecondaryColor",
        "body": "SecondaryColor",
        "description": "Sets the Colors for the histogram.SecondaryColor is the color for the secondary histogram. Default is red 255,0,0."
    },
    "BothColor Attribute": {
        "prefix": "BothColor",
        "body": "BothColor",
        "description": "Sets the Colors for the histogram.BothColor is the color used where the histogram elements overlap. Default is yellow 255,255,0."
    },
    "PrimaryImage Attribute": {
        "prefix": "PrimaryImage",
        "body": "PrimaryImage",
        "description": "PrimaryImage is the image used for the primary histogram."
    },
    "SecondaryImage Attribute": {
        "prefix": "SecondaryImage",
        "body": "SecondaryImage",
        "description": "SecondaryImage is the image used for the secondary histogram.If SecondaryImage is defined, then BothImage is required."
    },
    "BothImage Attribute": {
        "prefix": "BothImage",
        "body": "BothImage",
        "description": "BothImage is the image used where the histogram elements overlap.If SecondaryImage is defined, then BothImage is required."
    },
    "PrimaryImagePath Attribute": {
        "prefix": "PrimaryImagePath",
        "body": "PrimaryImagePath",
        "description": "Path to the location of optional image used as the primary, secondary or both histograms."
    },
    "SecondaryImagePath Attribute": {
        "prefix": "SecondaryImagePath",
        "body": "SecondaryImagePath",
        "description": "Path to the location of optional image used as the primary, secondary or both histograms."
    },
    "BothImagePath Attribute": {
        "prefix": "BothImagePath",
        "body": "BothImagePath",
        "description": "Path to the location of optional image used as the primary, secondary or both histograms."
    },
    "PrimaryImageCrop Attribute": {
        "prefix": "PrimaryImageCrop",
        "body": "PrimaryImageCrop",
        "description": "Crops the primary image within the specified bounds."
    },
    "SecondaryImageCrop Attribute": {
        "prefix": "SecondaryImageCrop",
        "body": "SecondaryImageCrop",
        "description": "Crops the secondary image within the specified bounds."
    },
    "BothImageCrop Attribute": {
        "prefix": "BothImageCrop",
        "body": "BothImageCrop",
        "description": "Crops both primary and secondary images within the specified bounds."
    },
    "PrimaryGreyScale Attribute": {
        "prefix": "PrimaryGreyScale",
        "body": "PrimaryGreyScale",
        "description": "Applies greyscale to the primary image.If set to 1, the image is greyscaled. (color desaturated)"
    },
    "SecondaryGreyScale Attribute": {
        "prefix": "SecondaryGreyScale",
        "body": "SecondaryGreyScale",
        "description": "Applies greyscale to the secondary image.If set to 1, the image is greyscaled. (color desaturated)"
    },
    "BothGreyScale Attribute": {
        "prefix": "BothGreyScale",
        "body": "BothGreyScale",
        "description": "Applies greyscale to both primary and secondary images.If set to 1, the image is greyscaled. (color desaturated)"
    },
    "PrimaryImageTint Attribute": {
        "prefix": "PrimaryImageTint",
        "body": "PrimaryImageTint",
        "description": "Applies a tint to the primary image."
    },
    "SecondaryImageTint Attribute": {
        "prefix": "SecondaryImageTint",
        "body": "SecondaryImageTint",
        "description": "Applies a tint to the secondary image."
    },
    "BothImageTint Attribute": {
        "prefix": "BothImageTint",
        "body": "BothImageTint",
        "description": "Applies a tint to both primary and secondary images."
    },
    "PrimaryImageFlip Attribute": {
        "prefix": "PrimaryImageFlip",
        "body": "PrimaryImageFlip",
        "description": "Flips the image. Valid values are None, Horizontal, Vertical or Both."
    },
    "SecondaryImageFlip Attribute": {
        "prefix": "SecondaryImageFlip",
        "body": "SecondaryImageFlip",
        "description": "Flips the image. Valid values are None, Horizontal, Vertical or Both."
    },
    "BothImageFlip Attribute": {
        "prefix": "BothImageFlip",
        "body": "BothImageFlip",
        "description": "Flips the image. Valid values are None, Horizontal, Vertical or Both."
    },
    "ColorMatrixN Attribute": {
        "prefix": "ColorMatrixN",
        "body": "ColorMatrix1=1; 0; 0; 0; 0\nColorMatrix2=0; 1; 0; 0; 0\nColorMatrix3=0; 0; 1; 0; 0\nColorMatrix4=0; 0; 0; 1; 0\nColorMatrix5=0; 0; 0; 0; 1",
        "description": "Defines a 5x5 matrix used to manipulate the color values of the image. It is divided into five separate options, one for each row, each numbered"
    },
    "UseExifOrientation Attribute": {
        "prefix": "UseExifOrientation",
        "body": "UseExifOrientation",
        "description": "If set to 1, the image is rotated based on the EXIF data encoded in the image by a camera."
    },
    "RadialGradient Attribute": {
        "prefix": "RadialGradient",
        "body": "RadialGradient",
        "description": "Parameters: CenterX, CenterY, OffsetX, OffsetY, RadiusX, RadiusY | Color ; Percentage|.. ."
    },
    "LinearGradient Attribute": {
        "prefix": "LinearGradient",
        "body": "LinearGradient",
        "description": "Parameters: Angle | Color ; Percentage |... ."
    },
    "Extend Attribute": {
        "prefix": "Extend",
        "body": "Extend",
        "description": "A special modifier that will allow you to move Attribute and / or Transform modifiers from the ShapeN option to one or more named options in the meter. "
    },
    "TransformOrder Attribute": {
        "prefix": "TransformOrder",
        "body": "TransformOrder",
        "description": "Allows you to change the default order in which the various Transform modifiers are applied.Default: Rotate, Scale, Skew, Offset "
    },
    "Skew Attribute": {
        "prefix": "Skew",
        "body": "Skew",
        "description": "Skews the shape in the X and / or Y axis, some number of positive or negative degrees of angle.Default: 0.0, 0.0, AnchorX, AnchorY "
    },
    "Rotate Attribute": {
        "prefix": "Rotate",
        "body": "Rotate",
        "description": "Rotates the shape some number of positive or negative degrees of angle, either around the center of the shape (default), or optional X,Y anchor points in pixels relative to the top left of the shape. "
    },
    "StrokeDashOffset Attribute": {
        "prefix": "StrokeDashOffset",
        "body": "StrokeDashOffset",
        "description": "Defines an offset where the first dash will start relative to the start of the shape. These are not numbers of pixels, but are a multiplication factor based on the StrokeWidth. So 0.0 would be none, 0.5 would be half the value of the SrokeWidth and 1.5 would be one and a half the value of the StrokeWidth"
    },
    "StrokeLineJoin Attribute": {
        "prefix": "StrokeLineJoin",
        "body": "StrokeLineJoin",
        "description": "Defines the type of join used on angled connections of drawing stroke segments in a shape or path. An optional MiterLimit can be used to specify how sharp Miter joins are allowed to be (default is 10.0)."
    },
    "StrokeDashes Attribute": {
        "prefix": "StrokeDashes",
        "body": "StrokeDashes",
        "description": "Defines a repeating dash or dot pattern for the shape's drawing stroke."
    },
    "StrokeDashCap Attribute": {
        "prefix": "StrokeDashCap",
        "body": "StrokeDashCap",
        "description": "Defines the shape of a cap used at the start and end of each dash in the drawing stroke defined by the StrokeDashes modifier."
    },
    "StrokeEndCap Attribute": {
        "prefix": "StrokeEndCap",
        "body": "StrokeEndCap",
        "description": "Defines the shape of a cap used at the end of the drawing stroke on an open shape. This modifier is ignored on closed shapes."
    },
    "StrokeStartCap Attribute": {
        "prefix": "StrokeStartCap",
        "body": "StrokeStartCap",
        "description": "Defines the shape of a cap used at the start of the drawing stroke on an open shape. This modifier is ignored on closed shapes."
    },
    "Draggable Attribute": {
        "prefix": "Draggable",
        "body": "Draggable",
        "description": "If set to 1, the skin can be dragged around with the mouse."
    },
    "Update Attribute": {
        "prefix": "Update",
        "body": "Update",
        "description": "Define Upate in Skin."
    },
    "DynamicWindowSize Attribute": {
        "prefix": "DynamicWindowSize",
        "body": "DynamicWindowSize",
        "description": "Define DynamicWindowSize in Skin."
    },
    "AccurateText Attribute": {
        "prefix": "AccurateText",
        "body": "AccurateText",
        "description": "Define AccurateText in Skin."
    },
    "Rainmeter Attribute": {
        "prefix": "Rainmeter",
        "body": "Rainmeter",
        "description": "Define Rainmeter Section in Skin."
    },
    "Variables Attribute": {
        "prefix": "Variables",
        "body": "Variables",
        "description": "Define Variables Section in Skin."
    },
    "DefaultUpdateDivider Attribute": {
        "prefix": "DefaultUpdateDivider",
        "body": "DefaultUpdateDivider",
        "description": "Default number of updates at which skin measure and meter values are updated. The Update option is multiplied by the specified value to determine how often measures and meters are updated."
    },
    "SkinWidth Attribute": {
        "prefix": "SkinWidth",
        "body": "SkinWidth",
        "description": " This will set and constrain the skin to the fixed dimensions defined, either the width, the height, or both. Any meter or part of a meter positioned outside the defined boundaries will be truncated. DynamicWindowSize will be ignored for the defined dimension(s), and meters that would normally display even \"outside\" the skin will be truncated by the fixed skin dimension(s)."
    },
    "SkinHeight Attribute": {
        "prefix": "SkinHeight",
        "body": "SkinHeight",
        "description": " This will set and constrain the skin to the fixed dimensions defined, either the width, the height, or both. Any meter or part of a meter positioned outside the defined boundaries will be truncated. DynamicWindowSize will be ignored for the defined dimension(s), and meters that would normally display even \"outside\" the skin will be truncated by the fixed skin dimension(s)."
    },
    "DragMarginsDefault Attribute": {
        "prefix": "DragMarginsDefault",
        "body": "DragMarginsDefault",
        "description": "Uses 4 values (left, top, right, bottom) separated by commas to define the area from where the window can be dragged. The values define a margin of non-draggable area. It's also possible to use negative numbers in which case the margin is calculated from the opposite side. E.g. DragMargins=0,-100,0,0."
    },
    "TransitionUpdate Attribute": {
        "prefix": "TransitionUpdate",
        "body": "TransitionUpdate",
        "description": "Defines the update time in milliseconds for meter transitions. While a transition is active the meter will update at this rate. Currently, only the Bitmap meter supports meter transitions."
    },
    "ToolTipHidden Attribute": {
        "prefix": "ToolTipHidden",
        "body": "ToolTipHidden",
        "description": "If set to 1, all tooltips in the skin will be hidden. "
    },
    "SelectedColor Attribute": {
        "prefix": "SelectedColor",
        "body": "SelectedColor",
        "description": "A color code used to define the color and transparency of the overlay when a skin is selected in a Drag Group. If this option is not defined, the default setting SelectedColor option is used.Note: This option will override any default SelectedColor."
    },
    "Background Attribute": {
        "prefix": "Background",
        "body": "Background",
        "description": "Path of a background image file."
    },
    "BackgroundMode Attribute": {
        "prefix": "BackgroundMode",
        "body": "BackgroundMode",
        "description": "Defines the background mode for the skin. Valid values are:0 : Image as defined by Background 1 : Transparent background 2 : Fill with a solid color 3 : Fill by scaling image as defined by Background 4 : Fill by tiling image as defined by Background BackgroundMode=2 : The color is set by adding a SolidColor option."
    },
    "BackgroundMargins Attribute": {
        "prefix": "BackgroundMargins",
        "body": "BackgroundMargins",
        "description": "If BackgroundMode=3, defines margins of the Background image that are not scaled. The parameters are left,top,right,bottom. Example: BackgroundMargins=0,10,0,20 10 pixels from the top and 20 pixels from the bottom of the image are not scaled."
    },
    "GradientAngle Attribute": {
        "prefix": "GradientAngle",
        "body": "GradientAngle",
        "description": "Angle of the gradient in degrees (for SolidColor and SolidColor2) when BackgroundMode=2."
    },
    "BevelType Attribute": {
        "prefix": "BevelType",
        "body": "BevelType",
        "description": "If enabled, draws a bevel around the edges of the entire skin when BackgroundMode=2"
    },
    "ContextTitle Attribute": {
        "prefix": "ContextTitle",
        "body": "ContextTitle",
        "description": "If not blank, adds an item to the skin's context menu under \"Custom skin actions\". Up to 25 ContextTitleN options are allowed, with up to 30 characters per option. "
    },
    "ContextAction Attribute": {
        "prefix": "ContextAction",
        "body": "ContextAction",
        "description": "Action triggered by clicking the corresponding ContextTitleN item. ContextActionN is required for ContextTitleN to be valid, unless the item is a separator."
    },
    "Blur Attribute": {
        "prefix": "Blur",
        "body": "Blur",
        "description": "Set to 1 to enable Aero Blur on the Windows 7 operating system. If no BlurRegions are specified, the entire skin background is blurred."
    },
    "BlurRegion Attribute": {
        "prefix": "BlurRegion",
        "body": "BlurRegion",
        "description": "Defines areas and shapes of the one or more regions of the skin to be blurred. The format of the option is: BlurRegion=Type, TopX, TopY, BottomX, BottomY ,Radius."
    },
    "DefaultWindowX": {
        "prefix": "DefaultWindowX",
        "body": "DefaultWindowX",
        "description": "Defines the default X position of the window."
    },
    "DefaultWindowY": {
        "prefix": "DefaultWindowY",
        "body": "DefaultWindowY",
        "description": "Defines the default Y position of the window."
    },
    "DefaultAnchorX": {
        "prefix": "DefaultAnchorX",
        "body": "DefaultAnchorX",
        "description": "Defines the default X anchor point of the window."
    },
    "DefaultFadeDuration": {
        "prefix": "DefaultFadeDuration",
        "body": "DefaultFadeDuration",
        "description": "Defines the default fade duration for window visibility."
    },
    "DefaultClickThrough": {
        "prefix": "DefaultClickThrough",
        "body": "DefaultClickThrough",
        "description": "Defines whether the window allows click-through (true or false)."
    },
    "DefaultKeepOnScreen": {
        "prefix": "DefaultKeepOnScreen",
        "body": "DefaultKeepOnScreen",
        "description": "Defines whether the window should stay on the screen (true or false)."
    },
    "DefaultAutoSelectScreen": {
        "prefix": "DefaultAutoSelectScreen",
        "body": "DefaultAutoSelectScreen",
        "description": "Defines whether the screen selection is automatic (true or false)."
    },
    "DefaultAnchorY": {
        "prefix": "DefaultAnchorY",
        "body": "DefaultAnchorY",
        "description": "Defines the default Y anchor point of the window."
    },
    "DefaultSavePosition": {
        "prefix": "DefaultSavePosition",
        "body": "DefaultSavePosition",
        "description": "Defines whether the window's position should be saved (true or false)."
    },
    "DefaultAlwaysOnTop": {
        "prefix": "DefaultAlwaysOnTop",
        "body": "DefaultAlwaysOnTop",
        "description": "Defines whether the window should always stay on top of other windows (true or false)."
    },
    "DefaultDraggable": {
        "prefix": "DefaultDraggable",
        "body": "DefaultDraggable",
        "description": "If set to 1, the skin can be dragged around with the mous"
    },
    "DefaultSnapEdges": {
        "prefix": "DefaultSnapEdges",
        "body": "DefaultSnapEdges",
        "description": "If set to 1, the skin will snap onto screen edges and other skins when moved. To disable snapping temporarily, hold the CTRL key down while moving the skin."
    },
    "DefaultStartHidden": {
        "prefix": "DefaultStartHidden",
        "body": "DefaultStartHidden",
        "description": "If set to 1, the skin will start hidden. The !Show bang must be used to show the skin."
    },
    "DefaultAlphaValue": {
        "prefix": "DefaultAlphaValue",
        "body": "DefaultAlphaValue",
        "description": "Sets the transparency of the skin. Valid values range from 0 (fully transparent) to 255 (fully visible)."
    },
    "DefaultOnHover": {
        "prefix": "DefaultOnHover",
        "body": "DefaultOnHover",
        "description": "Controls the transparency of the skin when the mouse is moved on and off of it. This works in conjunction with the setting in AlphaValue. "
    },
    "Combine": {
        "prefix": "Combine",
        "body": "Combine",
        "description": "Defines the Combine Attribute for shape meter."
    },
    "XOR": {
        "prefix": "XOR",
        "body": "XOR",
        "description": "Defines the XOR Attribute for shape meter."
    },
    "Formula": {
        "prefix": "Formula",
        "body": "Formula",
        "description": "Defines the Formula in the measure."
    },
    "Clamp": {
        "prefix": "Clamp",
        "body": "Clamp",
        "description": "Defines the Clamp Attribute for  meter."
    },
    "Prefix": {
        "prefix": "Prefix",
        "body": "Prefix",
        "description": "Text displayed before Text.Note: It is preferable to put the entire string in Text instead of using this option."
    },
    "Postfix": {
        "prefix": "Postfix",
        "body": "Postfix",
        "description": "Text displayed after Text.Note: It is preferable to put the entire string in Text instead of using this option."
    },
    "Padding": {
        "prefix": "Padding",
        "body": "Padding",
        "description": "Defines the Padding Attribute for  meter."
    },
    "Substitute": {
        "prefix": "Substitute",
        "body": "Substitute",
        "description": "Defines the Substitute Attribute for  meter."
    },
    "RegExpSubstitute": {
        "prefix": "RegExpSubstitute",
        "body": "RegExpSubstitute",
        "description": "Defines the RegExpSubstitute Attribute for  meter."
    }
}